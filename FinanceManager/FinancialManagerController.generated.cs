// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace FinanceManager.Controllers
{
    public partial class FinancialManagerController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FinancialManagerController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddOutgoingAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutgoingAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RemoveOutgoingAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveOutgoingAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditOutgoingAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditOutgoingAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult RemoveIncomigAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveIncomigAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult EditIncomingAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditIncomingAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddIncommingAmount()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddIncommingAmount);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddOutgointType()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutgointType);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult AddIncomimngType()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddIncomimngType);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult ShowBetwenDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowBetwenDate);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FinancialManagerController Actions { get { return MVC.FinancialManager; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FinancialManager";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "FinancialManager";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string ManageAdd = "ManageAdd";
            public readonly string ManageEdit = "ManageEdit";
            public readonly string AddOutgoingAmount = "AddOutgoingAmount";
            public readonly string RemoveOutgoingAmount = "RemoveOutgoingAmount";
            public readonly string EditOutgoingAmount = "EditOutgoingAmount";
            public readonly string RemoveIncomigAmount = "RemoveIncomigAmount";
            public readonly string EditIncomingAmount = "EditIncomingAmount";
            public readonly string AddIncommingAmount = "AddIncommingAmount";
            public readonly string AddOutgointType = "AddOutgointType";
            public readonly string AddIncomimngType = "AddIncomimngType";
            public readonly string ShowBetwenDate = "ShowBetwenDate";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string ManageAdd = "ManageAdd";
            public const string ManageEdit = "ManageEdit";
            public const string AddOutgoingAmount = "AddOutgoingAmount";
            public const string RemoveOutgoingAmount = "RemoveOutgoingAmount";
            public const string EditOutgoingAmount = "EditOutgoingAmount";
            public const string RemoveIncomigAmount = "RemoveIncomigAmount";
            public const string EditIncomingAmount = "EditIncomingAmount";
            public const string AddIncommingAmount = "AddIncommingAmount";
            public const string AddOutgointType = "AddOutgointType";
            public const string AddIncomimngType = "AddIncomimngType";
            public const string ShowBetwenDate = "ShowBetwenDate";
        }


        static readonly ActionParamsClass_AddOutgoingAmount s_params_AddOutgoingAmount = new ActionParamsClass_AddOutgoingAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOutgoingAmount AddOutgoingAmountParams { get { return s_params_AddOutgoingAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOutgoingAmount
        {
            public readonly string Amount = "Amount";
            public readonly string Description = "Description";
            public readonly string TypeID = "TypeID";
        }
        static readonly ActionParamsClass_RemoveOutgoingAmount s_params_RemoveOutgoingAmount = new ActionParamsClass_RemoveOutgoingAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveOutgoingAmount RemoveOutgoingAmountParams { get { return s_params_RemoveOutgoingAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveOutgoingAmount
        {
            public readonly string outgoing = "outgoing";
        }
        static readonly ActionParamsClass_EditOutgoingAmount s_params_EditOutgoingAmount = new ActionParamsClass_EditOutgoingAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditOutgoingAmount EditOutgoingAmountParams { get { return s_params_EditOutgoingAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditOutgoingAmount
        {
            public readonly string outgoing = "outgoing";
        }
        static readonly ActionParamsClass_RemoveIncomigAmount s_params_RemoveIncomigAmount = new ActionParamsClass_RemoveIncomigAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveIncomigAmount RemoveIncomigAmountParams { get { return s_params_RemoveIncomigAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveIncomigAmount
        {
            public readonly string income = "income";
        }
        static readonly ActionParamsClass_EditIncomingAmount s_params_EditIncomingAmount = new ActionParamsClass_EditIncomingAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_EditIncomingAmount EditIncomingAmountParams { get { return s_params_EditIncomingAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_EditIncomingAmount
        {
            public readonly string income = "income";
        }
        static readonly ActionParamsClass_AddIncommingAmount s_params_AddIncommingAmount = new ActionParamsClass_AddIncommingAmount();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddIncommingAmount AddIncommingAmountParams { get { return s_params_AddIncommingAmount; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddIncommingAmount
        {
            public readonly string Amount = "Amount";
            public readonly string Description = "Description";
            public readonly string SourceID = "SourceID";
        }
        static readonly ActionParamsClass_AddOutgointType s_params_AddOutgointType = new ActionParamsClass_AddOutgointType();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOutgointType AddOutgointTypeParams { get { return s_params_AddOutgointType; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOutgointType
        {
            public readonly string typeOfOutgoing = "typeOfOutgoing";
        }
        static readonly ActionParamsClass_AddIncomimngType s_params_AddIncomimngType = new ActionParamsClass_AddIncomimngType();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddIncomimngType AddIncomimngTypeParams { get { return s_params_AddIncomimngType; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddIncomimngType
        {
            public readonly string IncomimngType = "IncomimngType";
        }
        static readonly ActionParamsClass_ShowBetwenDate s_params_ShowBetwenDate = new ActionParamsClass_ShowBetwenDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_ShowBetwenDate ShowBetwenDateParams { get { return s_params_ShowBetwenDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_ShowBetwenDate
        {
            public readonly string dateFrom = "dateFrom";
            public readonly string dateTo = "dateTo";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AddAmontView = "AddAmontView";
                public readonly string AddIncomimngTypeView = "AddIncomimngTypeView";
                public readonly string AddOutgointTypeView = "AddOutgointTypeView";
                public readonly string EditAmontView = "EditAmontView";
                public readonly string IncomeAddView = "IncomeAddView";
                public readonly string IncomeEditView = "IncomeEditView";
                public readonly string ManageView = "ManageView";
                public readonly string OutgoingAddView = "OutgoingAddView";
                public readonly string OutgointEditView = "OutgointEditView";
            }
            public readonly string AddAmontView = "~/Views/FinancialManager/AddAmontView.cshtml";
            public readonly string AddIncomimngTypeView = "~/Views/FinancialManager/AddIncomimngTypeView.cshtml";
            public readonly string AddOutgointTypeView = "~/Views/FinancialManager/AddOutgointTypeView.cshtml";
            public readonly string EditAmontView = "~/Views/FinancialManager/EditAmontView.cshtml";
            public readonly string IncomeAddView = "~/Views/FinancialManager/IncomeAddView.cshtml";
            public readonly string IncomeEditView = "~/Views/FinancialManager/IncomeEditView.cshtml";
            public readonly string ManageView = "~/Views/FinancialManager/ManageView.cshtml";
            public readonly string OutgoingAddView = "~/Views/FinancialManager/OutgoingAddView.cshtml";
            public readonly string OutgointEditView = "~/Views/FinancialManager/OutgointEditView.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_FinancialManagerController : FinanceManager.Controllers.FinancialManagerController
    {
        public T4MVC_FinancialManagerController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ManageAddOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ManageAdd()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ManageAdd);
            ManageAddOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void ManageEditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ManageEdit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ManageEdit);
            ManageEditOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddOutgoingAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, double? Amount, string Description, long? TypeID);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddOutgoingAmount(double? Amount, string Description, long? TypeID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutgoingAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Amount", Amount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "TypeID", TypeID);
            AddOutgoingAmountOverride(callInfo, Amount, Description, TypeID);
            return callInfo;
        }

        [NonAction]
        partial void RemoveOutgoingAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Domain.Models.Outgoing outgoing);

        [NonAction]
        public override System.Web.Mvc.ActionResult RemoveOutgoingAmount(Domain.Models.Outgoing outgoing)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveOutgoingAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "outgoing", outgoing);
            RemoveOutgoingAmountOverride(callInfo, outgoing);
            return callInfo;
        }

        [NonAction]
        partial void EditOutgoingAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Domain.Models.Outgoing outgoing);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditOutgoingAmount(Domain.Models.Outgoing outgoing)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditOutgoingAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "outgoing", outgoing);
            EditOutgoingAmountOverride(callInfo, outgoing);
            return callInfo;
        }

        [NonAction]
        partial void RemoveIncomigAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Domain.Models.Income income);

        [NonAction]
        public override System.Web.Mvc.ActionResult RemoveIncomigAmount(Domain.Models.Income income)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveIncomigAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "income", income);
            RemoveIncomigAmountOverride(callInfo, income);
            return callInfo;
        }

        [NonAction]
        partial void EditIncomingAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Domain.Models.Income income);

        [NonAction]
        public override System.Web.Mvc.ActionResult EditIncomingAmount(Domain.Models.Income income)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.EditIncomingAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "income", income);
            EditIncomingAmountOverride(callInfo, income);
            return callInfo;
        }

        [NonAction]
        partial void AddIncommingAmountOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, double? Amount, string Description, long? SourceID);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddIncommingAmount(double? Amount, string Description, long? SourceID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddIncommingAmount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Amount", Amount);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "Description", Description);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SourceID", SourceID);
            AddIncommingAmountOverride(callInfo, Amount, Description, SourceID);
            return callInfo;
        }

        [NonAction]
        partial void AddOutgointTypeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string typeOfOutgoing);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddOutgointType(string typeOfOutgoing)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutgointType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "typeOfOutgoing", typeOfOutgoing);
            AddOutgointTypeOverride(callInfo, typeOfOutgoing);
            return callInfo;
        }

        [NonAction]
        partial void AddIncomimngTypeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string IncomimngType);

        [NonAction]
        public override System.Web.Mvc.ActionResult AddIncomimngType(string IncomimngType)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddIncomimngType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "IncomimngType", IncomimngType);
            AddIncomimngTypeOverride(callInfo, IncomimngType);
            return callInfo;
        }

        [NonAction]
        partial void ShowBetwenDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime? dateFrom, System.DateTime? dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult ShowBetwenDate(System.DateTime? dateFrom, System.DateTime? dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.ShowBetwenDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateFrom", dateFrom);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            ShowBetwenDateOverride(callInfo, dateFrom, dateTo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
