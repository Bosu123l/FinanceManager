// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace FinanceManager.Controllers
{
    public partial class FinancialBalanceController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected FinancialBalanceController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SetDateRange()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetDateRange);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult SetDateRangeForOutcoming()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetDateRangeForOutcoming);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Incomming()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Incomming);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Outgoing()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Outgoing);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CalculateFromSpecificYear()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateFromSpecificYear);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CalculateFromSpecificMonth()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateFromSpecificMonth);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult CalculateBetwenDate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateBetwenDate);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public FinancialBalanceController Actions { get { return MVC.FinancialBalance; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "FinancialBalance";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "FinancialBalance";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string SetDateRange = "SetDateRange";
            public readonly string SetDateRangeForOutcoming = "SetDateRangeForOutcoming";
            public readonly string Index = "Index";
            public readonly string Incomming = "Incomming";
            public readonly string Outgoing = "Outgoing";
            public readonly string CalculateFromSpecificYear = "CalculateFromSpecificYear";
            public readonly string CalculateFromSpecificMonth = "CalculateFromSpecificMonth";
            public readonly string CalculateBetwenDate = "CalculateBetwenDate";
            public readonly string CalclateFromBegining = "CalclateFromBegining";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string SetDateRange = "SetDateRange";
            public const string SetDateRangeForOutcoming = "SetDateRangeForOutcoming";
            public const string Index = "Index";
            public const string Incomming = "Incomming";
            public const string Outgoing = "Outgoing";
            public const string CalculateFromSpecificYear = "CalculateFromSpecificYear";
            public const string CalculateFromSpecificMonth = "CalculateFromSpecificMonth";
            public const string CalculateBetwenDate = "CalculateBetwenDate";
            public const string CalclateFromBegining = "CalclateFromBegining";
        }


        static readonly ActionParamsClass_SetDateRange s_params_SetDateRange = new ActionParamsClass_SetDateRange();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetDateRange SetDateRangeParams { get { return s_params_SetDateRange; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetDateRange
        {
            public readonly string dateOf = "dateOf";
            public readonly string dateTo = "dateTo";
        }
        static readonly ActionParamsClass_SetDateRangeForOutcoming s_params_SetDateRangeForOutcoming = new ActionParamsClass_SetDateRangeForOutcoming();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_SetDateRangeForOutcoming SetDateRangeForOutcomingParams { get { return s_params_SetDateRangeForOutcoming; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_SetDateRangeForOutcoming
        {
            public readonly string dateOf = "dateOf";
            public readonly string dateTo = "dateTo";
        }
        static readonly ActionParamsClass_Incomming s_params_Incomming = new ActionParamsClass_Incomming();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Incomming IncommingParams { get { return s_params_Incomming; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Incomming
        {
            public readonly string dateFrom = "dateFrom";
            public readonly string dateTo = "dateTo";
        }
        static readonly ActionParamsClass_Outgoing s_params_Outgoing = new ActionParamsClass_Outgoing();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Outgoing OutgoingParams { get { return s_params_Outgoing; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Outgoing
        {
            public readonly string dateFrom = "dateFrom";
            public readonly string dateTo = "dateTo";
        }
        static readonly ActionParamsClass_CalculateFromSpecificYear s_params_CalculateFromSpecificYear = new ActionParamsClass_CalculateFromSpecificYear();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CalculateFromSpecificYear CalculateFromSpecificYearParams { get { return s_params_CalculateFromSpecificYear; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CalculateFromSpecificYear
        {
            public readonly string year = "year";
        }
        static readonly ActionParamsClass_CalculateFromSpecificMonth s_params_CalculateFromSpecificMonth = new ActionParamsClass_CalculateFromSpecificMonth();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CalculateFromSpecificMonth CalculateFromSpecificMonthParams { get { return s_params_CalculateFromSpecificMonth; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CalculateFromSpecificMonth
        {
            public readonly string selectedMonth = "selectedMonth";
        }
        static readonly ActionParamsClass_CalculateBetwenDate s_params_CalculateBetwenDate = new ActionParamsClass_CalculateBetwenDate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_CalculateBetwenDate CalculateBetwenDateParams { get { return s_params_CalculateBetwenDate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_CalculateBetwenDate
        {
            public readonly string dateFrom = "dateFrom";
            public readonly string dateTo = "dateTo";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string DateMenuView = "DateMenuView";
                public readonly string IncomeAddView = "IncomeAddView";
                public readonly string IncomingListView = "IncomingListView";
                public readonly string IncomingTypeView = "IncomingTypeView";
                public readonly string ManageView = "ManageView";
                public readonly string OutgoingAddView = "OutgoingAddView";
                public readonly string OutgoingListView = "OutgoingListView";
            }
            public readonly string DateMenuView = "~/Views/FinancialBalance/DateMenuView.cshtml";
            public readonly string IncomeAddView = "~/Views/FinancialBalance/IncomeAddView.cshtml";
            public readonly string IncomingListView = "~/Views/FinancialBalance/IncomingListView.cshtml";
            public readonly string IncomingTypeView = "~/Views/FinancialBalance/IncomingTypeView.cshtml";
            public readonly string ManageView = "~/Views/FinancialBalance/ManageView.cshtml";
            public readonly string OutgoingAddView = "~/Views/FinancialBalance/OutgoingAddView.cshtml";
            public readonly string OutgoingListView = "~/Views/FinancialBalance/OutgoingListView.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_FinancialBalanceController : FinanceManager.Controllers.FinancialBalanceController
    {
        public T4MVC_FinancialBalanceController() : base(Dummy.Instance) { }

        [NonAction]
        partial void SetDateRangeOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime? dateOf, System.DateTime? dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SetDateRange(System.DateTime? dateOf, System.DateTime? dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetDateRange);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateOf", dateOf);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            SetDateRangeOverride(callInfo, dateOf, dateTo);
            return callInfo;
        }

        [NonAction]
        partial void SetDateRangeForOutcomingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime? dateOf, System.DateTime? dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult SetDateRangeForOutcoming(System.DateTime? dateOf, System.DateTime? dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.SetDateRangeForOutcoming);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateOf", dateOf);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            SetDateRangeForOutcomingOverride(callInfo, dateOf, dateTo);
            return callInfo;
        }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            IndexOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void IncommingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime dateFrom, System.DateTime dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Incomming(System.DateTime dateFrom, System.DateTime dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Incomming);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateFrom", dateFrom);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            IncommingOverride(callInfo, dateFrom, dateTo);
            return callInfo;
        }

        [NonAction]
        partial void OutgoingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime dateFrom, System.DateTime dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Outgoing(System.DateTime dateFrom, System.DateTime dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Outgoing);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateFrom", dateFrom);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            OutgoingOverride(callInfo, dateFrom, dateTo);
            return callInfo;
        }

        [NonAction]
        partial void CalculateFromSpecificYearOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string year);

        [NonAction]
        public override System.Web.Mvc.ActionResult CalculateFromSpecificYear(string year)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateFromSpecificYear);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "year", year);
            CalculateFromSpecificYearOverride(callInfo, year);
            return callInfo;
        }

        [NonAction]
        partial void CalculateFromSpecificMonthOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime? selectedMonth);

        [NonAction]
        public override System.Web.Mvc.ActionResult CalculateFromSpecificMonth(System.DateTime? selectedMonth)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateFromSpecificMonth);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "selectedMonth", selectedMonth);
            CalculateFromSpecificMonthOverride(callInfo, selectedMonth);
            return callInfo;
        }

        [NonAction]
        partial void CalculateBetwenDateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, System.DateTime? dateFrom, System.DateTime? dateTo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CalculateBetwenDate(System.DateTime? dateFrom, System.DateTime? dateTo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalculateBetwenDate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateFrom", dateFrom);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "dateTo", dateTo);
            CalculateBetwenDateOverride(callInfo, dateFrom, dateTo);
            return callInfo;
        }

        [NonAction]
        partial void CalclateFromBeginingOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult CalclateFromBegining()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.CalclateFromBegining);
            CalclateFromBeginingOverride(callInfo);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
